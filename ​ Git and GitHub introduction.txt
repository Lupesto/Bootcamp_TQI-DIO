Todo 
[ ] separar por tópicos
[ ] preparar arquivo em markdown
[ ] prática + tirar prints
[ ] reparo erros

-> Tópicos
O que é?
Ciclo de vida
Primeiro commit
Possíveis erros
Outros comandos


Para que serve o git?
controle de versões


Git
Criador: Linus Torvalds (mesmo criador do linux)
Tornar o software algo colaborativo, há outros sistemas de versionamento


GitHub
GitHub é da Microsoft, complementa o Git.  Há serviços similares ao GitHub.



Comandos no Windows:
cd - mudar de pasta
dir - lista arquivos
mkdir - criar diretório
rmdir - remover diretório
del - deleta dó arquivos
cls - limpar terminal


[pesquisar por instalação do Git]



#sha1 (secure hash algorithm)
criada pela agencia de segurança dos EUA
encriptação de saída com 40 dígitos chave
Geração de chaves conforme modificações



Para abrir Git em determinado diretório:
Botão direito> git bash here



- Objetos commit [Procurar por explicação melhor]
  Blobs, trees, commits 

​	


SSH: configuração de chaves, não fica pedindo senha para o usuário. Torna uma máquina confiável
GitHub setting > SSH > Create new SSH 
O site pede a chave pública SSH criada 

comandos para criar chaves:
ssh-keygen -t ed25519 -C seuEmail


gera uma chave pública e uma privada
dar um cd para /user/nomeUsuário/ .ssh
dar um ls
dar um cat id... .pub para visualizar a chave que vai no github




Comandos
eval $(ssh-agent -s)
ssh-add - colocar a chave privada
[clone repositório usando SSH / url do repositório]


Token de acesso pessoal: pedirá nickname e senha, todo commit exige.
Mantenha o token em um local seguro pois ele some

GitHub, criando token
Settings > Developer Settings > personal acess token > generate new token







--------------------
Como iniciar trabalhos com git?
Crie uma pasta que servirá de raiz para os repositórios (workspace)

botão direito > git bash here
git init (gerá pasta oculta git)
ls -a (para ver arquivos ocultos)

caso seja a primeira vez com o Git: 
git config -- global user.email "seu email"
git config --global user.name "nomeUser"




A linguagem para fazer a documentação no GitHub é o markdown (um HTML mais humanizado)
[link documentação markdown]
.md é a extensão desse tipo de arquivo

Uso do programa typora para editar markdown





Como gerar commit:
git add *
git commit -m "commit inicial"
git branch -M main
git push -u

Ciclo de vida no git
[como funciona git por de baixo dos panos: https://prnt.sc/wZ6Hm12NHxyz]



Comando para criar arquivo pelo terminal 
echo "" >> readme.md



git remote add origin git@github.com:Lupesto/tiny_Software.git


commits carregam mensagem de textos
no commit aparece os  primeiros caracteres do sha1


-----------
ciclo de vida no git

git init <- inicializa um repositório dentro de uma pasta
tracked <- dividem-se em não modificados, modificados e staged (aqueles esperando para algo)
untracked <- arquivos que o git se quer tem ciencia deles
git add <- manda um arquivo que o git não conhecia para staged 
unmodified <- aqueles no repositório que não teve modificação


dar um git add para um arquivo modificado mandará ele para staged
remover um arquivo unmodfied o joga para untracked

depois de staged o arquivo vai para commit, colocamos mensagem em um commit com autor e data
depois de commit um arquivo vai para não modificado (unmodified)


local repository <- na sua máquina
git status <- ver em que posição está um arquivo

working tree clean significa repositório de trabalho sem alteração
nothing to commit <-nada para comitar



mv para mover um arquivo 
mv NOMEARQUIVO.md ./outro repositório




https://pt.stackoverflow.com/questions/326160/diferen%C3%A7a-entre-git-add-all-git-add-e-git-add-u


git config --list <-lista de configurações no git
setar mesmo email e email/ name no github

para resetar config
git config --global --unset user.email
git config --global --unset user.nickname ou name


para setar o autor
git config --global user.email

substituir author de um commit mudará o sha1,
aparecerá no github de maneira diferente o author



para adicionar o local aonde enviaremos os arquivos vamos de > git remote add origin +URL
git remote -v <- listar repositórios remotos
git status mostrará que não tem nenhuma pendencia no repositório




se o repositório já tiver um origin
será necessário dar um 
git remote rm origin
e colocar seu novo repositório remoto destino

ERRO
Em caso de erro: 
https://prnt.sc/tR2-5XWnPaQJ
https://prnt.sc/063vGUKfffBS

é possível forçar o push 
Comando: git push origin main -f



Erros
código na máquina é desatualizado quando comparador com o arquivo remoto 
	github pede para vc puxar o código mais atual

duas alterações na mesma linha(conflito de match)
	Pede para abrir o arquivo e fazer as modificações por si mesmo
	git pull origin master <- para juntar ambos arquivos


Como clonar um repositório:
Como trocar repositório remoto <- git remote set-url origin https://git-repo/new-repository.git
[estudar sobre gitignore e licenças]







Para que serve o Git?
Pode ser usado para diversos fins, na academia por exemplo podemos trabalhar com a colaboração de outras pessoas




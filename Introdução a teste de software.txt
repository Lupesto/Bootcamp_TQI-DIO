wyllyancaetanodev


Falhas podem fazer com que perdamos clientes no software


teste, com entrada e saída esperada
teste de software não identifica 100% dos problemas


modelo cascata em teste de software
Não se voltava em tarefas anteriores
pessoas especificas para testes

desenvolvimento ágil-> ir e voltar em diversas tarefas no desenvolvimento de software
Funcionários trabalham em diversas áreas







FONTES:


--
Conceitos básicos



diferença entre:
defeito, erro ou falha
Falha -> cenário inexperado que retorna algum erro ao usuário. Por trás possui algum erro.
Erro -> falha humana perante o sistema
defeito -> bug. Erro tecnico. Instrução de código incorreta


Verificação: estamos construindo o sistema certo?
validação: confirmar se está construindo o software certo


---

niveis e tecnicas de testes

teste unitário: testes das pequenas unidades de software
validar cada parte do software
validar entradas e saidas do método
Ferramentas: Junit, phpunit, Jest


teste de integração: validar toda estrutura do software
bateria de testes,memória, consumo de api...

teste de sistema:
Software minimamente pronto, em que podemos testar abrindo-o , simulando o usuário

teste de regressão:
Automatização
Selenium <-
Testes em páginas


existem testes:
Alpha, beta e cannary
alpha - teste mais inicial possível
beta - maior quantidade de usuários, não 100% estável
cannary - Só algumas pesssoas utilizando a versão mais nova (PBE do LOL ou um LTS)

[Significado de deploy]

Teste de aceitação:
feedback do usuário

Testes são construidos conforme as especificações do cliente



[anotar referências]

--
Técnicas de teste

cada nivel de teste possui tecnica diferente
~
caixa branca:
teste estrutural
saber como funciona o código por baixo dos panos
acesso ao código fonte
Validar dados, cntroles, fluxos e chamadas


Caixa preta:
Teste funcional (com base no que o usuário pediu)
Sem acesso ao código fonte 
abertura só do software final
Sem entender o que está por trás


caixa cinza:
mescla de ambas as tecnicas (caixa branca  e preta)
saber o código + fazer testes do produto final

[PRESSMAN] principal referência para a área



---

Testes não funcionais

Não relacionado a expectativa de negócio / regras de negócio

ex: segurança, perfomance, infraestrutura
Qualidade do sistema, mas não o desejo do usuário
mais tenico

Teste de carga: verificar volume de acessos que o sistema/servidor/software suporta
como ter certeza que o software suporte milhares de usuários?
login com milhares de acessos
ex: gatting, apache

Teste stress:
submeter o software a condições extremas
avaliar comportamento do software em seu limite
Fazer com que o software quebre


teste de segurança:
segurança cibbernética, visa detectar vulnerabilidades




---

Pirâmide de testes <- inicio pelos testes unitários, a caminho dos testes de UI e manual
niveis de testes
testes unitários são mais rápidos


antipattern
[consultar bibliografia]

testes  manuais são muito caros.
Os testes exploram diversos cenários

--
Bibliografia:
https://engsoftmoderna.info/cap8.html
https://sttp.site/
DELAMARO, Márcio Eduardo; MALDONADO, José Carlos; JINO, Mário. Introdução ao teste de software, 2016.
PRESSMAN, R. S.; Software Engineering: A Practitioner's Approach, 7 ed., McGraw Hill, 2010
https://martinfowler.com/articles/practical-test-pyramid.html

https://blog.betrybe.com/tecnologia/requisitos-nao-funcionais/
http://www.facom.ufu.br/~abdala/DAS5312/Testes.pdf
https://pt.stackoverflow.com/questions/248318/qual-%C3%A9-a-diferen%C3%A7a-entre-um-teste-de-carga-e-um-teste-de-stress
https://pt.stackoverflow.com/questions/216571/o-que-%C3%A9-um-teste-de-stress/216574#216574
https://www.devmedia.com.br/testes-de-desempenho-carga-e-stress/26546
https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications


SOMMERVILLE, I.; Software Engineering, 8. ed., Addison-Wesley, 2007
Lewis, W.E.; Software Testing and Continuous Quality Improvement; Boca Raton: Auerbach; 2000


https://www.cin.ufpe.br/~gta/rup-vc/core.base_rup/guidances/concepts/levels_of_test_8A878577.html
https://edisciplinas.usp.br/pluginfile.php/384739/mod_resource/content/1/Aula%205_2014_Tipos-de-teste-software-v2.pdf
http://demoiselle.sourceforge.net/process/ds/1.2.3-BETA1/ProcessoDemoisellePlugin/guidances/supportingmaterials/tecnicasTestes_8AB32ED1.html
PRESSMAN, R. S.; Software Engineering: A Practitioner's Approach, 7 ed., McGraw Hill, 2010
SOMMERVILLE, I.; Software Engineering, 8. ed., Addison-Wesley, 2007


Delamaro, M.; Maldonado, J; Jino, M.; Introdução ao Teste de Software. Editora Campus, 2007.
https://ferhenriquef.com/2012/10/24/as-diferenas-entre-defeito-erro-e-falha/
https://sttp.site/chapters/getting-started/testing-principles.html
https://pt.stackoverflow.com/questions/204769/qual-diferen%C3%A7a-entre-falha-defeito-e-erro


https://medium.com/@miguelf_39043/optimizing-projects-with-agile-software-development-ef8f400d0f8c
https://medium.com/contexto-delimitado/o-modelo-em-cascata-f2418addaf36



http://www.garcia.pro.br/EngenhariadeSW/artigos%20engsw/teste/teste%20de%20software%20-%20artigo%201%20-%20rev1%20-%20introducao%20a%20teste%20de%20sw.pdf
https://www.comunicacaoecrise.com/site/index.php/artigos/1002-falha-na-tecnologia-da-ba-transforma-aeroportos-britanicos-num-caos
https://capitalcode.com.br/blog-post/11/O-BUG-de--300-milh%C3%B5es-de-d%C3%B3lares
https://www.istoedinheiro.com.br/e-commerce-perdem-pelo-menos-r-239-milhoes-durante-a-black-friday/
https://agora.folha.uol.com.br/grana/2021/06/caixa-tem-e-aplicativo-da-caixa-economica-apresentam-falhas.shtml



Juliana Mascarenhas

AULA 1:
Introdução
Ementa do curso

O que é Pensamento computacional?
expressamento de soluções em passos computacionais ou algoritmo, podem ser implementados no computador
Não se restringe a computação e exatas, por isso aprendemos a programaar no papel
Escrita para memória de longo prazo
Solução encontrada: pode ser usada por humanos e máquinas
Aplicação generalista 
Podemos usar na matemática, leitura e escrita (framentação de um texto ao construir e ler)

4 pilares:
Decomposição (dividir o problema em problemas menores) <- ex bolo com massa recheio e cobertura.

reconhecimento de padrões <-
identificar padrões tendências, similaridades/diferenças entre os problemas
exemplo: comportamento sardinha na bolsa é um padrão comportamental


Abstração <-
Problema para uma forma generalista


Design de algoritimos <- 
Definir passo a passo para a solução do problema


Vetor = lista = sequência

Algoritimo:
Input - Operações -> resultado
é um processo continuo, pode demandar refinamento

Super computador santo drummond? 
--
HABILIDADES COMPLEMENTARES


Raciocínio lógico e aperfeiçoamento
Raciocínio lógico <- forma de pensamento esrtuturado, conclusão ou resolução de um problema.

devemos treinar o cerebro

Classificação:
Indução, dedução e abdução

indução <- geração de leis e teorias. 
Dedução <- Utiliza leis e teorias para explicar
Abdução <- apartir da conclusão gerada a premisa. Apartir de algo observavel  vc tira uma conclusão. Utiliza em investigação


Ato de aperfeiçoar:
ex: simplificar linhas de códigos
Funções bem definidas(deixar o código limpo. Legibilidade do código)


--
Pilares: Decomposição

Decompor em problemas menores para que possamos resolver

Sintese <- juntar as soluções pequenas para solucionar problema maior


pode ser sequencial ou não, depende
existem problemas que depende da solução de um anterior

ex: ao cozinhar dividimos em etapas
Identificamos igredientes necessários
Sequencia da receita
execução das etapas
Adicionar igredientes processados em sequência




--
Pilares:Padrões


modelo de referência 
ex: cadeira, há variações, mas todas consideramos como contendo pernas

nós humanos fazemos isso por grau de similaridade: grupos conhecidos x objeto desconhecidos

Como o computador faz isso?
por comparação

humanos utiliza por subjetividade
Por isso precisamos ensinar a máquina, representando atributos. Uso de regras de decisão

aplicação:
reconhecimento de imagem, de fala, 
qual idioma está sendo usado?
classificação de documentos

áreas que utilizam o reconhecimento de padrão:
marchine learning, rede neurais, inteligência artificial, ciência de dados


--
Pilares: abstração

analisar caracteristica
isolamento de um objeto da realidade
detectar as caracteristica
generalizar: tornar alguma mais amplo, extenso

ex: classe de estudantes
atributos que possuem
precisamos limitar os atributos essenciais para solução do nosso problema

[merge sort, clustering, 
[Como são usados os grafos na programação?]





--
Pilares: Algoritimos

Computador precisa de instruções detalhadas para funcionar
Recebe, manipula e armazena dados
programas contém instruções

Como elaborar instruções?
definir o que precisa ser feito e ordem das execuções

Como construir um algoritimo?
Compreender o problema
definir dados de entrada
definir processamnto
Definid dados de saida
Utilizar algum metodo de contrução, testes e diagnosticos



Cibstrução por narrativa, fluxograma e psudocódigo
--
Estudos de caso




----

AULA 2:
Introdução a lógica de programação

lógica nos auxilia na resolução de problemas

tecnicas: linear, estruturada e modular

---
FUNDAMENTOS DE ALGORITMOS

tipos primitivos de dados: numericos(inteiros e reais), caracteres e lógicos


variável:
multável
inscontante
instável
Recebe algum tipo de dado
Restrita a receber um valor do seu tipo


regras:
Dê sentido ao nomear suas variáveis.
sem espaços

Papéis de uma variável: Pode ser de ação ou de controle



Constante: Inalterável, não muda. Exempl: Pi.

Dados podem ser tratados e processados
Instruções são operações para tratamento dos dados


operadores podem ser tanto binários como unário

--
cada linguagem possui uma sintaxe

--
Estruturas condicionais e operadores
dada uma condição satisfeita será executada uma operação

[exemplo confuso]
estruturas: Simples, composta e encadeada (if e else if)


operadores lógicos: and, or e not (inversão do resultado lógico)


--
estruturas de repetição

sinonimos: loop, repetição, laço, controle de fluxo, malha de repetição
necessária uma condição de parada, para que não haja loop infinito

-- 
Vetores e matrizes






--
Introdução à linguagem de programação
Cronologia dos principais acontecimentos 

toda evolução tecnologica inicia-se pelo hardware

segunda guerra mundial e explosão nas pesquisas em computação

charles babbage - conceitos software <- prototipo que não funcionava, 
Claude Shanon - algebra booleana
alan turing - segunda guerra mundial, descriptação mensagem do inimigo (conhecido como pai da computação. Questionamentos sobre inteligência artificial
Claude shanon - algebra booleana 
1888 - maquina de cartões no censo americano, criador da IBM


Mesmo periodo do ENIAC -> IBM Harvard Mark 1

PRINCIPAIS MARCOS
Eniac era programador por fios
edvac,
intel 8080
linguagem basic microsoft
criação apple
apple 2
IBM PC
Apple 3
Apple Lisa
Apple 3
windows 1.0
Windows 2000
windows xp






1949 -> primeira linguagem, linguagem de máquina, assembly
1950 primeiras linguagens:
fortran, cobol
Anos 60 e 70
C, prologo, machine learning

em 90 surgimento linguagens alto nivel
python, java, C#, JS


Cada era possui seus desafios


-----

--
Como um computaador entende um programa?


Diferença entre traduzido e interpretado

tradução = copilação
traduz codigo de alto nivel para baixo nivel (linguagem de maquina)

interpretação - programa fonte executado diretamente
python é uma linguagem interpretada

mais lento

interpretada -> geralmente linguagem mais facil de se programar,mais lenta, 

traduziida -> c++, java
--

Caracteristicas de um programa

facilidade de leitura
baixo custo (programa deve ser desenvolvido pensando no consumo dos recursos oferecidosm exemplo desempenho)
confiabilidade (fazer o que foi programador fazer)


python peca na performace, mas possui boas bibliotecas para dados


--
Léxica <-
Scanner. Leitura do programa fonte
Analisa no código palavras reservadas, strings, objetos
Elimina comentários, caracteres em branco

sintaxe- estrutura para codificação
cada linguagem possui uma

semântica, significado. Exemplo = é válido na sintaxe de uma linguagem, porém de de atribuição. Em um if devemos utilizar o == para não dar problema de semantica

-- 
paradigmas de programação


São eles:
Orientação a objetos
procedural
funcional
estruturado
computação distribuida
lógico



paradigma estruturado
sequencia, decisao e interação
instruções executadas em sequencia

C dominou o mercado até o POO
uso no aprendizado. Uso para entender o de "baixo dos panos"


POO,
analago ao mundo real
objetos possuem: caracteristicas especificas, comportamentos e estados
ex: o que tenho, o que sou capaz de fazer, como faço

caneta:
o q tem?
mode, cor, carga, ponta

o que é capaz de fazer?
escrever, deseenhar, rabiscar


eestados:
Tamapda, destampa e em uso

---


PRIMEIRO CONTATO COM A PROGRAMAÇÃO


site: portugol ide online


dificuldade em fixar algum conteúdo?
escreva manualmente

recomendação dos livros da Pearson






Escreveu um livro só sobre OO
400 páginas sobre o tema

obj: compreender todos os conceitos 

paradgima estruturado vs paradigma orientado a objetos:

POO -  representar de maneira mais realista o mundo real

no estruturado temos maior foco nas funções e dados (baixo nivel)
em POO - criação de entidades

PE - foco em "COMO FAZER"
POO - foco no "O que fazer". Permite mais no foco de pensar no problema e menos na ferramenta

vantagens POO :
Funcionalidades bem difinidas (coesa)
Melhor acoplamento 
Diminuição gap semântico (torna o mundo real e virtual mais próximos)
coleto de lixo (liberação da memória automaticamente)


--
fundamentos
abtração 
reuso
encapsulamento


[exercício fundamentos]


--
classe->
definição

estrutura define comportamento de seus objetos com atributos e metodos


concreto e abstratos podém ser representados em objetos
ex: bola e venda

[exercicio criando classe carro]


--
atributos ->
características de um objeto

criados em classes.
as variáveis são dados que geralmente mudam, inconstantes, instáveis.

nomear atributos com substantivos e adjetivos
contexto deve ser considerado


--

Serviços e ações que as classes vão oferecer 
ex: carro - ligar
venda - calcular total/lucro

gaste seu tempo criando métodos que utilizará no momento.

Na hora de criar seus métodos utilize verbos

Java e C# são muito parecidos

métodos especiais:
Construtor e destrutor
construtor -> cria objetos. Pode prover valores iniciais / métodos

destrutor -> 
acabar com um objeto para limpar memória
é uma boa prática

mudar assinatura método,
mesmo nome do método e permitir outros parâmetros
https://prnt.sc/jHSWZbLo5OBC


python -> é uma linguagem interpretada e dinâmica.

pq usar sobrecarga?
https://prnt.sc/jHSWZbLo5OBC

--

Carro carro = new Carro(); <- construtor

mensagem -> solicitação do método


Prossiga o conheicmento em:
https://prnt.sc/JIJ6fUGRfuaK


--

Heranças

criação de entidades a partir de outras

relacionamento classes pai, filhos (subclasse)

o extends em java.

herança simples:
quando as classes filhas heram algo de uma só classe mãe

herança multipla:
o oposto, classe filha possui duas classes mães ou mais

java e C# não possuem herança multipla
python e C++ possuem

--
upcast e downcast [ver exemplo de código java]
upcast -> classe superior
downcast -> classe inferior

python não possui upcast  nem downcast

--
polimorfismo

mesmo método se comportar diferente
de acordo com uma subclasse se comportar de maneira diferente o método da mãe


sobreescrita: 
mesmo método "podendo" sobreescrever um método
pode ser que em algumas das classes filhas você faça modificações no método


--

Associação [consultar bibliografia]

relação de objetos
estrutural e comportamental
dependência de uma classe com a outra

agregação:
uma das partes pode existir sem o outro

comportamental: pode usar ou não uma outra entidade

herança -> é mais flexivel que associação

--
interface

